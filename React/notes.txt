# React Fundamentals:
---------------------------------------------------------------------------------------------------------
Folder Structure

Typical React Project Structure

my-react-app/
├── public/
│   ├── index.html
│   ├── favicon.ico
│   └── manifest.json
├── src/
│   ├── components/
│   ├── pages/
│   ├── assets/
│   │   ├── images/
│   │   └── icons/
│   ├── App.js
│   ├── App.css
│   └── index.js
├── package.json
└── README.md

Detailed Explanation of Key Folders:

public/: Contains static files that are served directly by the web server
- `index.html`: The main HTML template
- Static assets like images, fonts (though often placed in src/assets)

src/: Contains all the source code
- components/: Reusable UI components
  
- pages/: Components that represent entire pages/screens

- assets/: Images, icons, fonts used in the application
---------------------------------------------------------------------------------------------------------

What are Components?

Definition
Components are independent, reusable pieces of UI that can be composed together to build complex user interfaces.

Characteristics:
- Reusable: Can be used multiple times throughout the app
- Independent: Should have a single responsibility
- Composable: Can be nested inside other components
- Manage their own state: Can have internal state and logic

Types of Components:

 1. Functional Components (Modern Approach)jsx
// Simple functional component
function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}

// With arrow function and destructuring
const Welcome = ({ name }) => {
  return <h1>Hello, {name}!</h1>;
};

 2. Class Components (Legacy)jsx
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}
---------------------------------------------------------------------------------------------------------
What are Pages?

Definition
Pages are top-level components that represent entire screens or routes in your application.

Characteristics:
- Route-specific: Each page typically corresponds to a URL route
- Composition of components: Pages assemble multiple components together
- Little to no reusability: Usually used only once in specific routes
- Often contain business logic: Handle data fetching, state management for that specific view

Example:jsx
// HomePage.js - represents the homepage
function HomePage() {
  return (
    <div>
      <Header />
      <HeroSection />
      <ProductGrid />
      <Footer />
    </div>
  );
}

---------------------------------------------------------------------------------------------------------

When to Use Components vs Pages

Use Components When:
    -You need reusable UI elements
    -The piece of UI is used in multiple places
    -You want to break down complex UI into smaller pieces
    -You need standalone functionality that can work independently

Use Pages When:
    -You're defining a specific route in your application
    -The component represents an entire screen
    -You're composing multiple components together for a specific view
    -You need to handle route-specific logic and data fetching

Rule of Thumb:
> "If you think you might use it more than once, make it a component. If it represents a full screen/view, make it a page."

---------------------------------------------------------------------------------------------------------

3 Simple Examples

Example 1: Basic Button Component

components/common/Button.jsjsx

import React from 'react';
import './Button.css';

const Button = ({ 
  children, 
  onClick, 
  variant = 'primary', 
  disabled = false,
  type = 'button'
}) => {
  return (
    <button
      type={type}
      className={`btn btn-${variant}`}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
};

export default Button;

components/common/Button.csscss

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: all 0.3s ease;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-primary:hover {
  background-color: #0056b3;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background-color: #545b62;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

Usage in a Page:jsx

import Button from '../components/common/Button';

function ContactPage() {
  const handleSubmit = () => {
    console.log('Form submitted!');
  };

  return (
    <div>
      <h1>Contact Us</h1>
      <form>
        {/* form fields */}
        <Button type="submit" variant="primary" onClick={handleSubmit}>
          Send Message
        </Button>
        <Button variant="secondary" onClick={() => console.log('Cancelled')}>
          Cancel
        </Button>
      </form>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------

Example 2: User Card Component

components/ui/UserCard.jsjsx

import React from 'react';

const UserCard = ({ user, onEdit, onDelete }) => {
  const { name, email, avatar, role } = user;

  return (
    <div className="user-card">
      <div className="user-avatar">
        <img src={avatar} alt={`${name}'s avatar`} />
      </div>
      <div className="user-info">
        <h3>{name}</h3>
        <p className="user-email">{email}</p>
        <span className={`user-role role-${role.toLowerCase()}`}>
          {role}
        </span>
      </div>
      <div className="user-actions">
        <button onClick={() => onEdit(user)} className="btn-edit">
          Edit
        </button>
        <button onClick={() => onDelete(user.id)} className="btn-delete">
          Delete
        </button>
      </div>
    </div>
  );
};

export default UserCard;

components/ui/UserCard.csscss

.user-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 16px;
  margin: 10px;
  display: flex;
  align-items: center;
  gap: 15px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.user-avatar img {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
}

.user-info h3 {
  margin: 0 0 5px 0;
  color: #333;
}

.user-email {
  margin: 0 0 8px 0;
  color: #666;
}

.user-role {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
}

.role-admin {
  background-color: #ffebee;
  color: #c62828;
}

.role-user {
  background-color: #e8f5e8;
  color: #2e7d32;
}

.user-actions {
  margin-left: auto;
  display: flex;
  gap: 8px;
}

.btn-edit, .btn-delete {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.btn-edit {
  background-color: #2196f3;
  color: white;
}

.btn-delete {
  background-color: #f44336;
  color: white;
}

---------------------------------------------------------------------------------------------------------

Example 3: Complete Page with Multiple Components

pages/UsersPage.jsjsx

import React, { useState, useEffect } from 'react';
import UserCard from '../components/ui/UserCard';
import Button from '../components/common/Button';
import './UsersPage.css';

const UsersPage = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);

  // Mock data - in real app, this would come from an API
  useEffect(() => {
    const mockUsers = [
      {
        id: 1,
        name: 'John Doe',
        email: 'john@example.com',
        avatar: 'https://via.placeholder.com/150',
        role: 'Admin'
      },
      {
        id: 2,
        name: 'Jane Smith',
        email: 'jane@example.com',
        avatar: 'https://via.placeholder.com/150',
        role: 'User'
      },
      {
        id: 3,
        name: 'Bob Johnson',
        email: 'bob@example.com',
        avatar: 'https://via.placeholder.com/150',
        role: 'User'
      }
    ];

    setTimeout(() => {
      setUsers(mockUsers);
      setLoading(false);
    }, 1000);
  }, []);

  const handleEditUser = (user) => {
    console.log('Editing user:', user);
    // In real app, this would open a modal or navigate to edit page
  };

  const handleDeleteUser = (userId) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      setUsers(users.filter(user => user.id !== userId));
    }
  };

  const handleAddUser = () => {
    console.log('Add new user');
    // In real app, this would open a form
  };

  if (loading) {
    return <div className="loading">Loading users...</div>;
  }

  return (
    <div className="users-page">
      <div className="page-header">
        <h1>User Management</h1>
        <Button variant="primary" onClick={handleAddUser}>
          Add New User
        </Button>
      </div>

      <div className="users-grid">
        {users.length > 0 ? (
          users.map(user => (
            <UserCard
              key={user.id}
              user={user}
              onEdit={handleEditUser}
              onDelete={handleDeleteUser}
            />
          ))
        ) : (
          <div className="no-users">No users found</div>
        )}
      </div>

      <div className="page-footer">
        <p>Total Users: {users.length}</p>
      </div>
    </div>
  );
};

export default UsersPage;

pages/UsersPage.csscss

.users-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  border-bottom: 2px solid #eee;
  padding-bottom: 20px;
}

.page-header h1 {
  color: #333;
  margin: 0;
}

.users-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.loading {
  text-align: center;
  padding: 50px;
  font-size: 18px;
  color: #666;
}

.no-users {
  text-align: center;
  padding: 50px;
  color: #999;
  grid-column: 1 / -1;
}

.page-footer {
  border-top: 1px solid #eee;
  padding-top: 20px;
  text-align: center;
  color: #666;
}

Summary of Key Points:
    1. Folder Structure: Organize by feature/type for better maintainability
    2. Components: Reusable, independent UI pieces (Buttons, Cards, Inputs)
    3. Pages: Route-specific screens that compose multiple components
    4. Separation of Concerns: Components handle UI, Pages handle business logic and composition
    5. Reusability: Create components when you need the same UI in multiple places